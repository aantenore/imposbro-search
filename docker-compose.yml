services:
  kafka:
    image: 'bitnami/kafka:latest'
    ports:
      - '9092:9092'
    environment:
      KAFKA_CFG_NODE_ID: 0
      KAFKA_CFG_PROCESS_ROLES: 'controller,broker'
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: '0@kafka:9093'
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_CFG_LISTENERS: 'INTERNAL://:29092,EXTERNAL://:9092,CONTROLLER://:9093'
      KAFKA_CFG_ADVERTISED_LISTENERS: 'INTERNAL://kafka:29092,EXTERNAL://localhost:9092'
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT'
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: 'INTERNAL'
    healthcheck:
      # Corrected to use a single string format for wider compatibility
      test: "kafka-topics.sh --bootstrap-server localhost:9092 --list"
      interval: 15s
      timeout: 10s
      retries: 10
    volumes:
      - kafka_data:/bitnami/kafka

  typesense:
    image: typesense/typesense:0.25.2
    ports:
      - '8108:8108'
    environment:
      TYPESENSE_API_KEY: ${TYPESENSE_API_KEY}
      TYPESENSE_DATA_DIR: /data
      TYPESENSE_ENABLE_CORS: 'true'
    volumes:
      - typesense_data_default:/data

  typesense-replica:
    image: typesense/typesense:0.25.2
    ports:
      - '8109:8108'
    environment:
      TYPESENSE_API_KEY: xyz-replica
      TYPESENSE_DATA_DIR: /data
      TYPESENSE_ENABLE_CORS: 'true'
    volumes:
      - typesense_data_replica:/data
  
  redis:
    image: redis:7-alpine
    ports:
      - '6379:6379'

  query_api:
    build: ./query_api
    ports:
      - '8000:8000'
    depends_on:
      - kafka
      - typesense
      - typesense-replica
      - redis
    env_file: .env

  indexing_service:
    build: ./indexing_service
    depends_on:
      kafka:
        condition: service_healthy
      query_api:
        condition: service_started
    env_file: .env
    
  admin_ui:
    build:
      context: ./admin_ui
    ports:
      - '3001:3000'
    depends_on:
      - query_api
    environment:
      - INTERNAL_QUERY_API_URL=${INTERNAL_QUERY_API_URL}

  prometheus:
    image: prom/prometheus:latest
    ports:
      - '9090:9090'
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    # Corrected to use a single string format
    command: --config.file=/etc/prometheus/prometheus.yml
    depends_on:
      - query_api

  grafana:
    image: grafana/grafana:latest
    ports:
      - '3000:3000'
    volumes:
      - ./monitoring/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
      - ./monitoring/grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    depends_on:
      - prometheus

volumes:
  kafka_data:
  typesense_data_default:
  typesense_data_replica:
